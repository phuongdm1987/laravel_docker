version: '2'
services:

  php-fpm-8.3:
    extends:
      file: docker-compose.base.yml
      service: app_base
    build:
      context: ./php-fpm
      args:
        - LARADOCK_PHP_VERSION=8.3.0
    image: backend-php-fpm-8.3
    container_name: php-fpm-8.3
    ports:
      - '5173:5173'

  php-worker-8.3:
    extends:
      file: docker-compose.base.yml
      service: app_base
    container_name: php-worker
    build:
      context: ./php-worker
      args:
        - LARADOCK_PHP_VERSION=8.3
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ./php-worker/supervisord.d:/etc/supervisord.d

  #Nginx Service
  nginx:
    extends:
      file: docker-compose.base.yml
      service: app_base
    build:
      context: ./nginx
    container_name: backend-nginx
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
    depends_on:
      - php-fpm-8.3

  #MySQL Service
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    container_name: backend-mysql
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE

  #REDIS Service
  redis:
    build: ./redis
    container_name: backend-redis
    volumes:
      - redis:/data
    ports:
      - "${REDIS_PORT}:6379"

  ### ElasticSearch ########################################
  elasticsearch:
    build: ./elasticsearch
    container_name: backend-elasticsearch
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=laravel-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"

  mailhog:
    image: 'mailhog/mailhog:latest'
    container_name: backend-mailhog
    ports:
      - "${MAILHOG_SMTP_PORT}:1025"
      - "${MAILHOG_HTTP_PORT}:8025"

  ### PostgreSQL ###########################################
  postgres:
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    container_name: backend-postgres
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  ### MinIO #################################################
  minio:
    image: minio/minio
    container_name: backend-minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_UI_PORT}:9001"
    volumes:
      - minio:/data
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: p@ssW0rd
    command: server --console-address ":9001" /data

#Docker Networks
networks:
  default:
    driver: ${NETWORKS_DRIVER}
#Volumes
volumes:
  redis:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  minio:
    driver: ${VOLUMES_DRIVER}
